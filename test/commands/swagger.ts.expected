/** DO NOT EDIT THIS FILE BECAUSE THIS FILE IS AUTOMATICALLY GENERATED
 ** BY SWAGGER-TO-JS-VALIDATOR NPM PACKAGE
 */

import type { NextApiRequest } from "next";
import * as Yup from "yup";

export const validatePetRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (
    !["put", "post"].some(
      (el) => el.toLowerCase() === req.method?.toLowerCase()
    )
  ) {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }

  switch (req.method?.toLowerCase()) {
    case "put": {
      return {
        error: null,
        schema: Yup.object()
          .shape({
            id: Yup.number(),
            category: Yup.object()
              .shape({ id: Yup.number(), name: Yup.string() })
              .noUnknown(),
            name: Yup.string().required(),
            photoUrls: Yup.array().of(Yup.string()).required(),
            tags: Yup.array().of(
              Yup.object()
                .shape({ id: Yup.number(), name: Yup.string() })
                .noUnknown()
            ),
            status: Yup.string().label("pet status in the store"),
          })
          .noUnknown(),
      };
    }

    case "post": {
      return {
        error: null,
        schema: Yup.object()
          .shape({
            id: Yup.number(),
            category: Yup.object()
              .shape({ id: Yup.number(), name: Yup.string() })
              .noUnknown(),
            name: Yup.string().required(),
            photoUrls: Yup.array().of(Yup.string()).required(),
            tags: Yup.array().of(
              Yup.object()
                .shape({ id: Yup.number(), name: Yup.string() })
                .noUnknown()
            ),
            status: Yup.string().label("pet status in the store"),
          })
          .noUnknown(),
      };
    }
  }
};

export type ValidatePetRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validatePetRequest>>["schema"],
  null | undefined
>;

export const validatePetFindByStatusRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "get") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }
};

export type ValidatePetFindByStatusRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validatePetFindByStatusRequest>>["schema"],
  null | undefined
>;

export const validatePetFindByTagsRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "get") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }
};

export type ValidatePetFindByTagsRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validatePetFindByTagsRequest>>["schema"],
  null | undefined
>;

export const validatePetPetIdRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (
    !["get", "post", "delete"].some(
      (el) => el.toLowerCase() === req.method?.toLowerCase()
    )
  ) {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }

  switch (req.method?.toLowerCase()) {
    case "post": {
      return {
        error: null,
        schema: Yup.object()
          .shape({
            name: Yup.string().label("Updated name of the pet"),
            status: Yup.string().label("Updated status of the pet"),
          })
          .noUnknown(),
      };
    }
  }
};

export type ValidatePetPetIdRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validatePetPetIdRequest>>["schema"],
  null | undefined
>;

export const validatePetPetIdUploadImageRequest = async (
  req: NextApiRequest
) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "post") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }

  return {
    error: null,
    schema: Yup.object()
      .shape({
        additionalMetadata: Yup.string().label(
          "Additional data to pass to server"
        ),
        file: Yup.string().label("file to upload"),
      })
      .noUnknown(),
  };
};

export type ValidatePetPetIdUploadImageRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validatePetPetIdUploadImageRequest>>["schema"],
  null | undefined
>;

export const validateStoreInventoryRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "get") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }
};

export type ValidateStoreInventoryRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateStoreInventoryRequest>>["schema"],
  null | undefined
>;

export const validateStoreOrderRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "post") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }

  return {
    error: null,
    schema: Yup.object()
      .shape({
        id: Yup.number(),
        petId: Yup.number(),
        quantity: Yup.number(),
        shipDate: Yup.string(),
        status: Yup.string().label("Order Status"),
        complete: Yup.boolean().default(false),
      })
      .noUnknown(),
  };
};

export type ValidateStoreOrderRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateStoreOrderRequest>>["schema"],
  null | undefined
>;

export const validateStoreOrderOrderIdRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (
    !["get", "delete"].some(
      (el) => el.toLowerCase() === req.method?.toLowerCase()
    )
  ) {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }
};

export type ValidateStoreOrderOrderIdRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateStoreOrderOrderIdRequest>>["schema"],
  null | undefined
>;

export const validateUserRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "post") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }

  return {
    error: null,
    schema: Yup.object()
      .shape({
        id: Yup.number(),
        username: Yup.string(),
        firstName: Yup.string(),
        lastName: Yup.string(),
        email: Yup.string(),
        password: Yup.string(),
        phone: Yup.string(),
        userStatus: Yup.number().label("User Status"),
      })
      .noUnknown(),
  };
};

export type ValidateUserRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateUserRequest>>["schema"],
  null | undefined
>;

export const validateUserCreateWithArrayRequest = async (
  req: NextApiRequest
) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "post") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }

  return {
    error: null,
    schema: Yup.array().of(
      Yup.object()
        .shape({
          id: Yup.number(),
          username: Yup.string(),
          firstName: Yup.string(),
          lastName: Yup.string(),
          email: Yup.string(),
          password: Yup.string(),
          phone: Yup.string(),
          userStatus: Yup.number().label("User Status"),
        })
        .noUnknown()
    ),
  };
};

export type ValidateUserCreateWithArrayRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateUserCreateWithArrayRequest>>["schema"],
  null | undefined
>;

export const validateUserCreateWithListRequest = async (
  req: NextApiRequest
) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "post") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }

  return {
    error: null,
    schema: Yup.array().of(
      Yup.object()
        .shape({
          id: Yup.number(),
          username: Yup.string(),
          firstName: Yup.string(),
          lastName: Yup.string(),
          email: Yup.string(),
          password: Yup.string(),
          phone: Yup.string(),
          userStatus: Yup.number().label("User Status"),
        })
        .noUnknown()
    ),
  };
};

export type ValidateUserCreateWithListRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateUserCreateWithListRequest>>["schema"],
  null | undefined
>;

export const validateUserLoginRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "get") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }
};

export type ValidateUserLoginRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateUserLoginRequest>>["schema"],
  null | undefined
>;

export const validateUserLogoutRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (req.method?.toLowerCase() !== "get") {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }
};

export type ValidateUserLogoutRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateUserLogoutRequest>>["schema"],
  null | undefined
>;

export const validateUserUsernameRequest = async (req: NextApiRequest) => {
  // check if the request's method is allowed
  if (
    !["get", "put", "delete"].some(
      (el) => el.toLowerCase() === req.method?.toLowerCase()
    )
  ) {
    return {
      error: {
        status: 405,
        message: "Method not allowed",
      },
      schema: null,
    };
  }

  switch (req.method?.toLowerCase()) {
    case "put": {
      return {
        error: null,
        schema: Yup.object()
          .shape({
            id: Yup.number(),
            username: Yup.string(),
            firstName: Yup.string(),
            lastName: Yup.string(),
            email: Yup.string(),
            password: Yup.string(),
            phone: Yup.string(),
            userStatus: Yup.number().label("User Status"),
          })
          .noUnknown(),
      };
    }
  }
};

export type ValidateUserUsernameRequestResolvedType = Exclude<
  Awaited<ReturnType<typeof validateUserUsernameRequest>>["schema"],
  null | undefined
>;
